_include:
  (cultcargo):
    - wsclean.yml
    - tricolour.yml

## this augments the standard 'opts' config section to tweak logging settings
opts:
  log:
    dir: logs/log-{config.run.datetime}
    name: log-{info.fqname}
    nest: 2
    symlink: log
  backend:
    select: singularity
    rlimits:
      NOFILE: 100000  # set high limit on number of open files


target-masking:
  name: target-masking
  info: |
    Recipe for doing basic imaging and deconvolution with the intention of
    constructing an initial mask. This recipe was derived from the approach
    taken in oxkat (https://github.com/IanHeywood/oxkat).

  assign_based_on:
    _include: tmp.yml  # =recipe.telecope-file
    # band:  # How do we handle a cartesian product of telescope and band?

  inputs:
    ms-path:
      dtype: MS
      required: true
    telescope:
      dtype: str
      required: true
    band:
      dtype: str
      choices: [UHF, L, S0, S1, S2, S3, S4]
      required: true
    

  # outputs:
  #   updated-flags:  # Arbitrary output name which maps...
  #     aliases:
  #       - flag-save-post.flagversions-table  # ...to this value.
  #   updated-flag-versionname:
  #     dtype: str
  #     default: 'meerkat-{current.band}-band-target-flagging'

  steps:
    image-without-mask:
      info: |
        Perform basic imagaging and deconvolution of the target using the
        automatic threshholding and masking behaviour of wsclean.
      cab: wsclean
      params:
        ms: =recipe.ms-name
        prefix: =recipe.foo
        size: 1024
        scale: 1arcsec



    # flag-load:
    #   info: |
    #     Restore the original flags to the dataset. The flag-save step must have
    #     been run once for this step to work.
    #   cab: casa.flagman.restore
    #   params:
    #     ms: =recipe.ms-name
    #     versionname: =recipe.steps.flag-save-prior.versionname

    # flag-known-rfi-bands:
    #   info: Flag known L-band RFI ranges.
    #   cab: casa.flagdata
    #   params:
    #     ms: =recipe.ms-name
    #     spw: =recipe.CAL_1GC_BAD_FREQS
    #     mode: 'manual'

    # flag-known-rfi-bands-specific-baselines:
    #   info: Flag known L-band RFI ranges on specific baselines.
    #   cab: casa.flagdata
    #   params:
    #     ms: =recipe.ms-name
    #     spw: =recipe.CAL_1GC_BL_FREQS
    #     mode: 'manual'
    #     uvrange: =recipe.CAL_1GC_BL_FLAG_UVRANGE

    # flag-autocorrelations:
    #   info: Flag all autocorrelations.
    #   cab: casa.flagdata
    #   params:
    #     ms: =recipe.ms-name
    #     mode: 'manual'
    #     autocorr: true

    # flag-zeros:
    #   info: Flag zero data.
    #   cab: casa.flagdata
    #   params:
    #     ms: =recipe.ms-name
    #     mode: 'clip'
    #     clipzeros: true

    # flag-extreme-values:
    #   info: Flag values with very large values.
    #   cab: casa.flagdata
    #   params:
    #     ms: =recipe.ms-name
    #     mode: 'clip'
    #     clipminmax: [0, 100]

    # flag-polarisation:
    #   cab: tricolour
    #   params:
    #     ms: =recipe.ms-name
    #     config: "${self:dirname}/meerkat_target_narrow.tri.yml"
    #     flagging-strategy: polarisation
    #     data-column: DATA

    # flag-save-post:
    #   info: |
    #     Create a backup of the flags on the dataset after the recipe has run.
    #   cab: casa.flagman.save
    #   params:
    #     ms: =recipe.ms-name
    #     versionname: 'meerkat-{recipe.band}-band-target-flagging'