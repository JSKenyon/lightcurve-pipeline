#!/usr/bin/env -S stimela run

_include:
  - lightcurve-cabs.yml
  - (breifast.cabs)breifast.yml
  - (breifast.cabs)tron-cabs.yml
  - (breifast)tron.yml
  - (breifast)tron-breifast.yml
  - (breifast)tron-lightcurves.yml

## this augments the standard 'opts' config section to tweak logging settings
opts:
  log:
    dir: logs/log-{config.run.datetime}
    name: log-{info.fqname}
    nest: 2
    symlink: log
  backend:
    select: singularity
    rlimits:
      NOFILE: 100000  # set high limit on number of open files

lightcurve-pipeline:
  name: lightcurve-pipeline
  info: "Generic pipeline for extracting lightcurves from interferometer data."

  assign:
    dir-out: '{recipe.dirs.base}/{recipe.dirs.sub}{recipe.output-suffix}'  # output products go here
    image-prefix: '{recipe.dir-out}/im{info.suffix}{recipe.variant}/im{info.suffix}{recipe.variant}'  # prefix for image names at each step
    log.dir: '{recipe.dir-out}/logs/log-{config.run.datetime}'  # put logs into output dir
    # some more directory assignments
    dirs.temp: "{recipe.dirs.base}/tmp"  # temp files go here
    ms-path: "{recipe.dirs.ms}/{recipe.ms-name}"

    # _chan1x: =recipe.chan1 - 1       # end channel, inclusive -- helper variable to form CASA spw
    casa-spw: 0 #"0:{recipe.chan0}~{recipe._chan1x}"  # CASA spw parameter

    # extra lightcurve suffix, added if convolving
    lc-suffix: =IF(recipe.convolve.arcsec or recipe.convolve.time, "-{recipe.convolve.time:.0f}s-{recipe.convolve.arcsec:.0f}asec", "")

  assign_based_on:
    _include: datasets.yml

  inputs:
    obs:
      choices: [meerkat_uhf_test, meerkat_l_test, ata_test]
      info: "Selects observation, see datasets.yml for list of observations."
      default: ata_test
    output-suffix:
      dtype: str
      default: ''
    variant:
      dtype: str
      default: ''
    htc_cadence:
      dtype: int
      default: 1
    htc_size:
      dtype: int
      default: 512
    htc_scale:
      dtype: str
      default: '{recipe.pixel_scale}'
    htc_weight:
      dtype: str
      default: natural
    convolve:
      arcsec:
        dtype: float
        default: 0
      time:
        dtype: float
        default: 120
    mad_flag:
      dtype: bool
      default: false
      aliases:
        - (quartical).mad_flags.enable
    publish-plots:
      dtype: bool
      default: false
    publish-plot-title:
      default: 'Observation {recipe.obs}: peak $ {{peak_ujy:.0f}}\pm{{peak_std_ujy:.0f}} $ uJy'

  aliases:
    ms:
      - (wsclean).ms
      - (quartical).input_ms.path
    weight:
      - (wsclean).weight
      - (wsclean_pol).weight
    minuv-l:
      - (wsclean).minuv-l
    taper-inner-tukey:
      - (wsclean).taper-inner-tukey

  steps:
    flag-save:
      info: |
        Create a backup of the original flags on the dataset. This step is only
        run when the init tag is selected.
      tags: [init, never]
      cab: casa.flagman
      params:
        ms: =recipe.ms-path
        mode: save
        versionname: =recipe.initial-flag-version

    save-ms-info:
      info: |
        Run some custom python code to extract some useful metadata
        from the dataset
      tags: [always]
      cab: save-ms-info
      skip_if_outputs: exist
      params:
        ms: =recipe.ms-path
        ms-info-file: '{recipe.dir-out}/{recipe.ms-name}.yml'

    ms-info:
      info: |
        Load the file generated by save-ms-info so that it can be used by later
        recipe steps. Note that this step must be run for any subsequent steps
        which use its outputs to work.
      tags: [always]
      cab: load-ms-info
      params:
        ms-info-file: =steps.save-ms-info.ms-info-file

    flag-reset:
      info: |
        Restore the original flags to the dataset. The flag-save step must have
        been run once for this step to work.
      cab: casa.flagman
      params:
        ms: =recipe.ms-path
        mode: restore
        versionname: =recipe.initial-flag-version

    image-1:
      info: |
        Image and deconvolve the data using wsclean. Masking and thresholding
        are handled automatically by wsclean. This may not work in all cases.
      _use: lib.steps.wsclean.image_column
      params:
        column: DATA  # Start from the contents of the DATA column.

    mask-1:
      info: |
        Make a mask for the field using breizorro.
      recipe: make_masks
      params:
        restored-image: "{previous.restored.mfs}"
        prefix: "{previous.prefix}"
        mask: "{current.prefix}-mask.fits"

    flagsummary-1:
      info: |
        Use casa to generate a summary of the flags on the dataset.
      cab: casa.flagsummary
      params:
        ms: =recipe.ms-path
        spw: =recipe.casa-spw

    predict-1:
      info: |
        Use wsclean to write the visibilities associated with the model to the
        MODEL_DATA column.
      _use: lib.steps.wsclean.predict
      params:
        ms: =recipe.ms-path
        prefix: '{steps.image-1.prefix}'
        nchan: '{steps.image-1.nchan}'

    selfcal-1:
      info: |
        Use quartical to perform basic selfcal. Solves for a delay and phase
        term per scan. Note that the selfcal step may require tuning based
        on the field and instrument in question.
      _use: lib.steps.quartical.k

    flagsummary-2:
      info: |
        Use casa to generate a summary of the flags on the dataset.
      cab: casa.flagsummary
      params:
        ms: =recipe.ms-path
        spw: =recipe.casa-spw

    image-2:
      info: |
        Image and deconvolve the selfcal corrected data using wsclean and a
        fits mask.
      _use: lib.steps.wsclean.image_column
      params:
        column: =steps.selfcal-*.corrected_data_column
        fits-mask: =steps.mask-*.mask
        auto-threshold: 1

    predict-2:
      info: |
        Use wsclean to write the visibilities associated with the model to the
        MODEL_DATA column.
      _use: lib.steps.wsclean.predict
      params:
        ms: =recipe.ms-path
        prefix: =steps.image-2.prefix
        nchan: =steps.image-2.nchan

    add-corrected-data:
      info: |
        Use casa to add the CORRECTED_DATA column if it does not exist.
      cab: msutils.addcol
      params:
        msname: =recipe.ms-path
        colname: CORRECTED_DATA

    subtract-model:
      info: |
        Subtract the model visibilities from the corrected data to produce the
        corrected residuals.
      cab: taql.update
      params:
        ms: =recipe.ms-path
        commands: =LIST("set", "CORRECTED_DATA={steps.image-2.column}-MODEL_DATA")

    transient-imaging:
      info: Run the tron pipeline for image plane transient detection.
      recipe: tron_wrapper
      backend:
        select: native
      params:
        obs: =recipe.obs
        ms: =recipe.ms-path
        dirs.temp: =recipe.dirs.temp
        dirs.cubes: '{recipe.dir-out}/cubes'
        column.residual: CORRECTED_DATA
        deep-image: =steps.image-2.restored.mfs
        htc:
          cadence: =recipe.htc_cadence
          size: =recipe.htc_size
          scale: =recipe.htc_scale
          weight: =recipe.htc_weight
          convolve:
            arcsec: 8
        dir-out: =recipe.dir-out
        nlc: =recipe.nlc
        ncpu: =recipe.ncpu
        stokes: [I]
        enable-hdf5: false
        enable-fits: true
      tags: [breifast]


tron_wrapper:
  _use: tron_base
  inputs:
    ms:
      info: measurement set
      dtype: MS
      required: true
    dirs:
      temp:
        dtype: Directory
        required: true
      cubes:
        dtype: Directory
        required: true
