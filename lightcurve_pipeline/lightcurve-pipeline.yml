#!/usr/bin/env -S stimela run

_include:
  - lightcurve-cabs.yml
  - flagging/meerkat_1k_basic.yml
  - (breifast.recipes)tron.yml

## this augments the standard 'opts' config section to tweak logging settings
opts:
  log:
    dir: logs/log-{config.run.datetime}
    name: log-{info.fqname}
    nest: 2
    symlink: log
  backend:
    select: singularity
    rlimits:
      NOFILE: 100000  # set high limit on number of open files

lightcurve-pipeline:
  name: lightcurve-pipeline
  info: |
    Generic pipeline for extracting lightcurves from interferometer data.
    Currently tailored for processing MeerKAT L1 visibilities averaged down
    to 1k.

  assign:
    # Output products go here. These paths are set in datasets.yml.
    dir-out: '{recipe.dirs.base}/{recipe.dirs.sub}{recipe.output-suffix}'
    # Prefix for image names at each step. Includes full output path.
    image-prefix: '{recipe.dir-out}/im{info.suffix}{recipe.variant}/im{info.suffix}{recipe.variant}'
    # Redirect logs to the output directory.
    log.dir: '{recipe.dir-out}/logs/log-{config.run.datetime}'
    # Set up a tempoerary directory (used by some steps).
    dirs.temp: "{recipe.dirs.base}/tmp"
    # Form up the full path to the measurement set.
    ms-path: "{recipe.dirs.ms}/{recipe.ms-name}"

  assign_based_on:
    _include: datasets.yml

  inputs:
    obs:
      choices: [meerkat_uhf_test, meerkat_l_test, ata_test]
      info: "Selects observation, see datasets.yml for list of observations."
      default: ata_test
    output-suffix:
      dtype: str
      default: ''
    variant:
      dtype: str
      default: ''
    htc_cadence:
      dtype: int
      default: 1
    htc_size:
      dtype: int
      default: 512
    htc_scale:
      dtype: str
      default: '{recipe.pixel_scale}'
    htc_weight:
      dtype: str
      default: natural
    convolve:
      arcsec:
        dtype: float
        default: 0
      time:
        dtype: float
        default: 120
    mad_flag:
      dtype: bool
      default: false
      aliases:
        - (quartical).mad_flags.enable

  aliases:
    ms:
      - (wsclean).ms
      - (quartical).input_ms.path
    weight:
      - (wsclean).weight
      - (wsclean_pol).weight
    minuv-l:
      - (wsclean).minuv-l
    taper-inner-tukey:
      - (wsclean).taper-inner-tukey

  steps:
    basic-flagging:
      info: |
        Run a basic flagging subrecipe, based on Oxkat, which will flag known
        RFI bands and do a basic tricolour run (which assumes that the data has
        been averaged down to 1024 channels). The subrecipe will back up the
        original flags before running.
      recipe: meerkat-target-flagging
      skip_if_outputs: exist
      params:
        ms-name: =recipe.ms-path
        band: =recipe.band

    flag-reset:
      info: |
        Restore the flags to their state after the inital flagging step. The
        basic-flagging step must have been run once for this step to work.
      cab: casa.flagman.restore
      params:
        ms: =recipe.ms-path
        versionname: =previous.updated-flag-versionname

    flagsummary-1:
      info: |
        Use casa to generate a summary of the flags on the dataset.
      cab: casa.flagsummary
      params:
        ms: =recipe.ms-path

    image-1:
      info: |
        Image and deconvolve the data using wsclean. Masking and thresholding
        are handled automatically by wsclean. This may not work in all cases.
      _use: lib.steps.wsclean.image_column
      params:
        column: DATA  # Start from the contents of the DATA column.

    mask-1:
      info: |
        Make a mask for the field using breizorro.
      cab: breizorro
      params:
        restored-image: "{previous.prefix}-MFS-image.fits"
        dilate: 2

    predict-1:
      info: |
        Use wsclean to write the visibilities associated with the model to the
        MODEL_DATA column.
      _use: lib.steps.wsclean.predict
      params:
        ms: =recipe.ms-path
        prefix: '{steps.image-1.prefix}'
        nchan: '{steps.image-1.nchan}'

    selfcal-1:
      info: |
        Use quartical to perform basic selfcal. Solves for a delay and phase
        term per scan. Note that the selfcal step may require tuning based
        on the field and instrument in question.
      _use: lib.steps.quartical.k

    flagsummary-2:
      info: |
        Use casa to generate a summary of the flags on the dataset.
      cab: casa.flagsummary
      params:
        ms: =recipe.ms-path

    image-2:
      info: |
        Image and deconvolve the selfcal corrected data using wsclean and a
        fits mask.
      _use: lib.steps.wsclean.image_column
      params:
        column: =steps.selfcal-*.corrected_data_column
        fits-mask: =steps.mask-*.outfile
        auto-threshold: 1

    predict-2:
      info: |
        Use wsclean to write the visibilities associated with the model to the
        MODEL_DATA column.
      _use: lib.steps.wsclean.predict
      params:
        ms: =recipe.ms-path
        prefix: =steps.image-2.prefix
        nchan: =steps.image-2.nchan

    subtract-model:
      info: |
        Subtract the model visibilities from the corrected data to produce the
        corrected residuals.
      cab: taql.update
      params:
        ms: =recipe.ms-path
        commands: =LIST("set", "CORRECTED_DATA={steps.image-2.column}-MODEL_DATA")

    transient-imaging:
      info: Run the tron pipeline for image plane transient detection.
      recipe: tron-wrapper
      params:
        obs: =recipe.obs
        ms: =recipe.ms-path
        dirs.temp: =recipe.dirs.temp
        dirs.cubes: '{recipe.dir-out}/cubes'
        column.residual: CORRECTED_DATA
        deep-image: =steps.image-2.restored.mfs
        htc:
          cadence: =recipe.htc_cadence
          size: =recipe.htc_size
          scale: =recipe.htc_scale
          weight: =recipe.htc_weight
          convolve:
            arcsec: 8
        dir-out: =recipe.dir-out
        nlc: =recipe.nlc
        ncpu: =recipe.ncpu
        stokes: [I]
        enable-hdf5: false
        enable-fits: true
      tags: [breifast]


tron-wrapper:
  _use: tron-base
  inputs:
    ms:
      info: measurement set
      dtype: MS
      required: true
  outputs:
    dirs:
      temp:
        dtype: Directory
        required: true
        skip_freshness_checks: true
        mkdir: true
      cubes:
        dtype: Directory
        required: true
        mkdir: true